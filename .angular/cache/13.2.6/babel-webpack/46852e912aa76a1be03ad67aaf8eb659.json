{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\ACER\\\\source\\\\repos\\\\ECommerceApp\\\\ECommerceClient\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../http-client.service\";\nexport class ProductService {\n  constructor(httpClientService) {\n    this.httpClientService = httpClientService;\n  }\n\n  create(product, successCallBack, errorCallBack) {\n    this.httpClientService.post({\n      controller: 'products'\n    }, product).subscribe(result => {\n      successCallBack();\n    }, errorResponse => {\n      const _error = errorResponse.error;\n      let message = '';\n\n      _error.forEach((v, index) => {\n        v.value.forEach((_v, _index) => {\n          message += `${_v}<br>`;\n        });\n      });\n\n      errorCallBack(message);\n    });\n  }\n\n  read() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const promiseData = _this.httpClientService.get({\n        controller: 'products'\n      }).toPromise();\n\n      promiseData.then().catch();\n      return yield promiseData;\n    })();\n  }\n\n}\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClientService));\n};\n\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/ACER/source/repos/ECommerceApp/ECommerceClient/src/app/services/common/models/product.service.ts"],"names":["i0","i1","ProductService","constructor","httpClientService","create","product","successCallBack","errorCallBack","post","controller","subscribe","result","errorResponse","_error","error","message","forEach","v","index","value","_v","_index","read","promiseData","get","toPromise","then","catch","ɵfac","ProductService_Factory","t","ɵɵinject","HttpClientService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,iBAAD,EAAoB;AAC3B,SAAKA,iBAAL,GAAyBA,iBAAzB;AACH;;AACDC,EAAAA,MAAM,CAACC,OAAD,EAAUC,eAAV,EAA2BC,aAA3B,EAA0C;AAC5C,SAAKJ,iBAAL,CACKK,IADL,CACU;AACNC,MAAAA,UAAU,EAAE;AADN,KADV,EAGGJ,OAHH,EAIKK,SAJL,CAIgBC,MAAD,IAAY;AACvBL,MAAAA,eAAe;AAClB,KAND,EAMIM,aAAD,IAAmB;AAClB,YAAMC,MAAM,GAAGD,aAAa,CAACE,KAA7B;AACA,UAAIC,OAAO,GAAG,EAAd;;AACAF,MAAAA,MAAM,CAACG,OAAP,CAAe,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACzBD,QAAAA,CAAC,CAACE,KAAF,CAAQH,OAAR,CAAgB,CAACI,EAAD,EAAKC,MAAL,KAAgB;AAC5BN,UAAAA,OAAO,IAAK,GAAEK,EAAG,MAAjB;AACH,SAFD;AAGH,OAJD;;AAKAb,MAAAA,aAAa,CAACQ,OAAD,CAAb;AACH,KAfD;AAgBH;;AACKO,EAAAA,IAAI,GAAG;AAAA;;AAAA;AACT,YAAMC,WAAW,GAAG,KAAI,CAACpB,iBAAL,CACfqB,GADe,CACX;AACLf,QAAAA,UAAU,EAAE;AADP,OADW,EAIfgB,SAJe,EAApB;;AAKAF,MAAAA,WAAW,CAACG,IAAZ,GAAmBC,KAAnB;AACA,mBAAaJ,WAAb;AAPS;AAQZ;;AA9BuB;;AAgC5BtB,cAAc,CAAC2B,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAI7B,cAAV,EAA0BF,EAAE,CAACgC,QAAH,CAAY/B,EAAE,CAACgC,iBAAf,CAA1B,CAAP;AAAsE,CAAjI;;AACA/B,cAAc,CAACgC,KAAf,GAAuB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElC,cAAT;AAAyBmC,EAAAA,OAAO,EAAEnC,cAAc,CAAC2B,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../http-client.service\";\r\nexport class ProductService {\r\n    constructor(httpClientService) {\r\n        this.httpClientService = httpClientService;\r\n    }\r\n    create(product, successCallBack, errorCallBack) {\r\n        this.httpClientService\r\n            .post({\r\n            controller: 'products',\r\n        }, product)\r\n            .subscribe((result) => {\r\n            successCallBack();\r\n        }, (errorResponse) => {\r\n            const _error = errorResponse.error;\r\n            let message = '';\r\n            _error.forEach((v, index) => {\r\n                v.value.forEach((_v, _index) => {\r\n                    message += `${_v}<br>`;\r\n                });\r\n            });\r\n            errorCallBack(message);\r\n        });\r\n    }\r\n    async read() {\r\n        const promiseData = this.httpClientService\r\n            .get({\r\n            controller: 'products',\r\n        })\r\n            .toPromise();\r\n        promiseData.then().catch();\r\n        return await promiseData;\r\n    }\r\n}\r\nProductService.ɵfac = function ProductService_Factory(t) { return new (t || ProductService)(i0.ɵɵinject(i1.HttpClientService)); };\r\nProductService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductService, factory: ProductService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}